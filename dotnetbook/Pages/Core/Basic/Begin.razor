@page "/core/begin"

<PageTitle>Введение в платформу .NET - .NET книга</PageTitle>


<div class="border-1 bg-light shadow rounded-1 p-2">

    <h1>Введение в платформу .NET</h1>
    <hr />
    <NavLink href="core" class="link-success">
        Руководство .NET
    </NavLink>
    <hr />
    <p>C# уже не молодой язык и как и вся платформа .NET уже прошел большой путь. Первая версия языка вышла вместе с
        релизом Microsoft Visual Studio .NET в феврале 2002 года. Текущей версией языка является версия C# 11,
        которая вышла 8 ноября 2022 года вместе с релизом .NET 7.</p>
    <p>.NET Core позволяет разрабатывать веб приложения и сервисы на Windows, iOS & Linux, мобильные приложения на
        Android & iOS, а также настольные приложения только на Windows.</p>

    <h4>Общеязыковая среда исполнения Core Runtime</h4>
    <p>Формально можно разделить на CoreCLR & CoreFX. С точки зрения программиста .NET Core - это общеязыковая среда
        исполнения и всеоблеющая библиотека базовых классов.</p>
    <p>В рамках программирования термин исполняющая среда можно понимать как коллекцию служб, которые требуются для
        выполнения скомпилированной единицы кода.</p>
    <p>Слой исполнения содержит минимальную реализацию, специфичную для платформы (Windows, iOS, Linux, Android) и
        архитектуры (x86, x64, ARM), использует все базовые типы .NET Core.</p>

    <h4>Общая система типов CTS</h4>
    <p>Спецификация Common Type System (CTS) описывает все типы и все программные конструкции, поддерживаемые средой
        исполнения, спецификации их работы, описанные в виде метаданных.</p>

    <h6>Виды типов</h6>
    <p>Класс, основан на парадигме ООП, основа - ссылочный тип, может содержать любое количество членов и элементов
        данных, содержит: конструкторы, свойства, методы, события и поля.</p>
    <p>Интерфейс - именованная коллекция абстрактных членов (и стандартных реализаций членов), которые могут быть
        реализованы в классе или структуре.</p>
    <p>Структура - легковесная реализация класса, основа - значимый тип, содержит конструкторы, методы и поля.</p>
    <p>Перечисление - удобная структура комбинаций ключ-значение на основе значимого типа.</p>
    <p>Делегат - типобезопасный эквивалент указателя на функцию языка С. Служит для реализации функций обратного
        вызова.</p>

    <h6>Члены типов</h6>
    <p>Поле - переменная, являющаяся частью состояния объекта.</p>
    <p>Метод - функция, выполняющая операцию с объектом, часто с изменением его состояния.</p>
    <p>Свойство - выглядить как поле, но в реализации типа является методом (или двумя методами).</p>
    <p>Событие - конструкция для создания механизма оповещения между объектом и другими заинтересованными объектами.
    </p>

    <h4>Общеязыковая спецификация CLS</h4>
    <p>Так как не все языки платформы .NET Core поддерживают все что есть в общей системе типов, есть спецификация
        CLS,
        в которой описаны типы, которые должен поддерживать всякий язык платфонмы.</p>
    <p>Самым важным в CLS является правило номер 1.</p>
    <ul class="list-group">
        <li class="list-group-item">Правило номер 1. Правила CLS применяются только к тем частям типа, которые видны
            извне определяющей сборки.</li>
    </ul>
    <p>Это подмножество, описанное в общей системе типов CTS.</p>
    <p>Спецификация CLS - набор подробных правил, описывающих минимальное и полное множество характеристик, который
        отдельный компилятор .NET должен поддерживать, чтобы генерировать код, обслуживаемый средой CLR и в тоже
        время
        доступный другим языкам, также ориентированных на эту платформу. Можно рассматривать общеязыковую
        спецификацию
        CLS как подмножество полной функциональнотси, определенной в общей системе типов CTS.</p>
    <p>Это набор правил, которых должны придерживатся создатели компиляторов, если они намерены обеспечивать работу
        своих сборок в платформе .NET.</p>
    <p>Сообщить компилятору о том, что он должен сделать проверку на совместимость с CLS в проекте:</p>

    <div class="border border-dark rounded-1 px-2 my-2">
        <pre class="my-3">
[assembly: CLSCompliant(true)]</pre>
    </div>

    <h4>Библиотека базовых классов</h4>
    <p>Платформа содержит библиотеку базовых классов BCL, которая доступная на всех языках платформы. Она описывает
        типы, которые могут быть использованы для разработки любого программного обеспечения и компонентов.</p>

    <h4>Стандартная инфраструктура разработки библиотек</h4>
    <p>.NET Standard описывает типы, которые поддерживаются как .NET Core, так и старой платформой .NET Framework.
    </p>

    <h4>Управляемый и неуправляемый код</h4>
    <p>Код, написанный и нацеленный на исполнение в среде .NET Core, является управляемым. Двоичный модуль, который
        содержит управляемый код, называется сборкой.</p>
    <p>Код, не выполняемый в среде .NET Core, является неуправляемым. Оба кода (управляемый и неуправляемый) могут
        быть
        взаимосвязанными. Один код может использовать другой код.</p>
    <p>Двоичные модули, .NET внутренне устроены совершенно отлично от неуправляемых (*.dll и *.exe). Они содержат не
        специфические, а независимые от платформы инструкции на промежуточном языке (Intermediate Language — IL) и
        метаданные типов.</p>
    <p>В отличие от старой платформы .NET Framework, в новой .NET Core всегда компилируются только файлы с
        расширением
        *.dll, в том числе и исполняемые. Исполняемые сборки .NET Core выполняются с помощью команды "dotnet
        'имя_сборки'.dll".</p>

    <h4>JIT-компиляция</h4>
    <p>Код на C# компилируется в приложения или сборки с расширениями exe или dll на языке CIL. Далее
        при запуске на выполнение подобного приложения происходит JIT-компиляция (Just-In-Time) в машинный код,
        который
        затем выполняется. При этом, поскольку наше приложение может быть большим и содержать кучу инструкций, в
        текущий
        момент времени будет компилироваться лишь та часть приложения, к которой непосредственно идет обращение.
        Если мы
        обратимся к другой части кода, то она будет скомпилирована из CIL в машинный код. При том уже
        скомпилированная
        часть приложения сохраняется до завершения работы программы. В итоге это повышает производительность.</p>

    <hr />
    <div class="text-center">
        <NavLink href="core" class="link-success">
            Содержание
        </NavLink>
    </div>

</div>



