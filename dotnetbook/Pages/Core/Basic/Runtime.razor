@page "/core/runtime"

<PageTitle>Среда исполнения - .NET книга</PageTitle>

<div class="border-1 bg-light shadow rounded-1 p-2">

    <h1>Среда исполнения</h1>
    <hr />
    <NavLink href="core" class="link-success">
        Руководство .NET
    </NavLink>
    <hr />
    <p>Общеязыковая среда исполнения CLR это самодостаточная высокоуровневая виртуальная машина разработанная для
        поддержки разнообразнейших языков программирования и взаимодействия между ними.</p>
    <p>Основные языки программирования: C#, C++/CLI, Visual Basic, F#, дополнительные: Iron Python, Iron Ruby,
        ассемблер Intermediate Laguage (IL). Для каждого языка используется свой компилятор, ориентированный на CLR.
        Результатом компиляции будет управляемый модуль (сборка). Все CLR компиляторы генерируют промежуточный
        IL-код (управляемый).</p>
    <p>Для работы приложения .NET (.NET Core) - нужен NET Core = Core CLR + Core FX (новое название для BCL). Иной
        способ загрузки среды выполнения (CLR). В .NET Core MyApp.exe сам по себе является нативной программой
        загрузки Core CLR.</p>
    <p>Для работы приложения на старом .NET Framework на целевой машине должен быть установлен .NET Framework, а
        именно CLR + BCL. BCL располагается в GAC.</p>
    <p>В .NET Core все компоненты программы, которые мы определяем на этапе компиляции, являются зависимостями
        приложения (включая Core CLR, JIT), которые инфраструктура .NET Core рассматривает как пакеты.</p>
    <p>Зависимости в распакованном виде при запуске приложения должны находиться в одной из определенных директорий
        (папке .NET Core фреймворка — Core FX, папке приложения или любом NuGet-кеше).</p>

    <h4>Части управляемого модуля</h4>
    <ul class="list-group">
        <li class="list-group-item">Заголовок PE32 или PE32+. Файл с заголовком в формате PE32 может выполняться в
            32- и 64-разрядной версиях Windows, а с заголовком PE32+ — только в 64-разрядной. Заголовок обозначает
            тип файла: GUI, CUI или DLL, он также имеет временную метку, показывающую, когда файл был собран. В
            модулях, содержащих машинный код, этот заголовок содержит сведения о машинном коде.</li>
        <li class="list-group-item">Заголовок CLR. Содержит информацию (интерпретируемую CLR и утилитами), которая
            превращает эту сборку в управляемую. Заголовок включает информацию: название нужной версии CLR, метку
            метаданных MethodDef, указатель на точку входа в управляемый модуль (метод Main), а также
            месторасположение/размер метаданных модуля, ресурсов и пр.</li>
        <li class="list-group-item">Метаданные. Каждый управляемый модуль содержит таблицы метаданных. Есть два
            основных вида таблиц — это таблицы, описывающие типы данных и их члены, пределенные в исходном коде этой
            сборки, и таблицы, описывающие типы данных и их члены, на которые имеются ссылки из исходного кода.</li>
        <li class="list-group-item">Код CIL. Код на общем промежуточном языке, создаваемый компилятором при
            компиляции исходного кода. Впоследствии CLR компилирует CIL в машинные команды.</li>
        <li class="list-group-item">Ресурсы. Изображения, файлы и прочее.</li>
    </ul>
    <div class="border-1 bg-white border rounded-1 p-1">
        <p>Задачей среды выполнения CLR является преобразовать промежуточный код в исполняемый на ходу запуска
            исполняемого файла программы. А это значит что программа будет работать там, где установлена среда .NET.
        </p>
    </div>

    <h4>.NET (.NET Core) Runtime</h4>
    <p>Для выполнения приложения на целевой должен быть установлен .NETRuntime (shared framework) в папку
        C:\Program Files\dotnet. Файлы фреймворка хранятся в папке C:\Program Files\dotnet\shared.</p>
    <p>Можно установить несколько версий.</p>
    <p>Состав фреймворка:</p>
    <ul class="list-group">
        <li class="list-group-item">Утилита dotnet.exe для запуска .NET Core приложения - драйвер инфраструктуры
            .NET Core, точка входа для запуска любых приложений и выполнения команд разработки. Является
            хост-процессом любого приложения - corehost.</li>
        <li class="list-group-item">Runtime-компоненты устанавливаются в отдельную папку фреймворка C:\Program
            Files\dotnet\shared[Framework
            name][Framework version].</li>
        <li class="list-group-item">Нативная библиотека host framework resolver в папке C:\Program
            Files\dotnet\host[версия]\hostfxr.dll.
            Максимальная версия выполняет разрешение версии фреймворка для последующего выполнения.</li>
    </ul>
    <p>Для выполнения Portable-приложения необходимо запустить хост-процесс dotnet.exe и передать ему в качестве
        аргумента путь к управляемой сборке.</p>
    <div class="border border-dark rounded-1 px-2 my-2">
        <pre class="my-3">
dotnet path/to/App.dll</pre>
    </div>
    <p>В папке приложения (там, где находится [AppName].dll) должен лежать файл [AppName].runtimeconfig.json. В нём
        указаны имя и версия фреймворка, которые должны быть использованы для выполнения Portable-приложения. Этот
        файл является обязательным для Portable-приложений.</p>
    <h4>Процесс запуска приложения .NET (.NET Core)</h4>
    <p>Запуск приложения выполняется при помощи мультплексора (muxer) из командной строки (одинаково на любой ОС).
    </p>
    <div class="border border-dark rounded-1 px-2 my-2">
        <pre class="my-3">
dotnet path/to/App.dll</pre>
    </div>
    <p>dotnet.exe — переименованный corehost.exe, эта программа является хост-процессом любого .NET Core-приложения,
        с неё начинается процесс запуска.</p>
    <p>Исполняемый файл *.exe выполяет подобно ярлыку, выполняя описанную команду.</p>
    <h6>[corehost] Поиск и загрузка Framework Resolver (hostfxr.dll)</h6>
    <p>На этом этапе dotnet.exe идет в папку [own directory]/host/fxr/. Для Portable-приложений эта библиотека
        расположена в общей папке C:\Program Files\dotnet\host\fxr[FXR version]\hostfxr.dll. Если версий будет
        несколько, dotnet.exe будет всегда использовать последнюю.</p>
    <p>После загрузки hostfxr.dll (Framework Resolver) процесс запуска переходит в рамки этой библиотеки.</p>
    <h6>[hostfxr] Определение режима выполнения (standalone, muxer, split/FX)</h6>
    <p>Первая задача hostfxr — определить режим, в котором будет работать хост процесс и таким образом тип
        приложения — Portable (FDD) или Standalone (SCD). В Portable (FDD)-режиме он также определяет: это
        запускаемое приложение или команда SDK.</p>
    <h6>[hostfxr] Определение .NET (.NET Core) Runtime</h6>
    <p>Первым делом hostfxr определяет и загружает файлы конфигурации deps и runtimeconfig. Если ничего не
        переопределено в аргументах, эти файлы берутся из папки приложения.</p>
    <h6>[hostfxr] Поиск и загрузка hostpolicy.dll</h6>
    <p>На текущем этапе всё готово для определения путей runtime-компонентов. Этой задачей занимается библиотека
        hostpolicy.dll, которая называется Host library.</p>
    <p>Как только опеределена hostpolicy.dll, hostfxr загружает эту библиотеку и передает ей управление.</p>
    <h6>[hostpolicy] Определение списка зависимостей</h6>
    <p>Библиотека hostpolicy.dll отвечает за определение абсолютных путей всех зависимостей приложения.</p>
    <h6>[hostpolicy] Определение путей TPA, Core CLR и CLR Jit</h6>
    <p>Далее Dependency resolver составляет список абсолютных путей файлов управляемых сборок — зависимостей
        приложения. Этот список называется TPA (Trusted Platform Assemblies) и передается Core CLR для настройки
        AppDomain. Также составляется список абсолютных путей директорий, в которых находятся остальных файлы
        зависимостей (кроме coreclr, corejit).</p>
    <p>Далее управление переходит к coreclr.dll.</p>
    <h4>Заключение .NET (.NET Core) Runtime</h4>
    <ul class="list-group">
        <li class="list-group-item">Компонентная модель .NET (.NET Core) (Runtime, BCL) полностью состоит из
            NuGet-пакетов.
        </li>
        <li class="list-group-item">Существует два типа развертывания — FDD и SCD. По возможности рекомендуется
            использовать Framework Dependent-развертывание, чтобы избежать сложностей с платформозависимыми
            компонентами и не поставлять лишние зависимости.
        </li>
        <li class="list-group-item">Есть достаточно много возможностей повлиять на процесс запуска на целевой
            машине, и при необходимости переопределить/пропатчить файлы зависимостей, а также добавить неявные
            (динамически запускаемые) зависимости.
        </li>
        <li class="list-group-item">Не рекомендуется без особых причин удалять или изменять файл Dependency manifest
            (*.deps.json) .
        </li>
        <li class="list-group-item">Используя --additional-deps и --additionalprobepaths мы можем размещать
            runtime-компоненты в нужной нам файловой структуре.
        </li>
        <li class="list-group-item">Используя Exec mode можно переопределить файлы конфигурации приложения.
        </li>
    </ul>
    <h4>Компилятор среды CLR</h4>
    <p>Перед исполнением метода Main() CLR находит все типы данных, на которые ссылается код метода Main().</p>
    <p>Код преобразует из одного вида в другой специальный JIT (точно в срок - jit on time)-компилятор среды CLR.
        При запуске экзешника исполняемого файла среда CLR активирует JIT компилятор и он уже преобразует код IL в
        машинный код, ориентированный на конктектную процессорную архитектуру, например x86, x64 или ARM. Программа
        как бы выполняется как собственный код, при это обеспечивается переносимость превдокода IL.</p>
    <p>JIT-компилятор хранит машинные команды в динамической памяти.</p>

    <hr />

    <h4>Устаревшая .NET Framework Runtime</h4>
    <p>В отличие от .NET (.NET Core) старая платформа устанавливается по другому. Главный файл платформы mscoree.dll
        устанавливается в каталог %SystemRoot%\system32. Однако в 64 разрядных системах версия 32-разрядная лежит в
        каталоге %SystemRoot%\SysWow64, 64-разрядная - по предидущему пути. А файлы версий платформы .NET Framework
        должны лежать в каталогах %SystemRoot%\Microsoft.NET\Framework & %SystemRoot%\Microsoft.NET\Framework64.
        Утилита clrver.exe выводит список всех установленных версий.</p>
    <h4>Процесс запуска устаревшей .NET Framework</h4>
    <p>При запуске исполняемого файла Windows анализирует заголовок исполняемого файла для определения того, какое
        именно адресное пространство необходимо для его работы - 64-разрядное или 32-разрядное.</p>
    <p>Далее основной поток вызывает определенный в библиотеке mscoree.dll метод, который инициализирует CLR,
        загружает сборку exe и вызывает метод Main(), в котором содержится точка входа.</p>

    <hr />
    <div class="text-center">
        <NavLink href="core" class="link-success">
            Содержание
        </NavLink>
    </div>

</div>



